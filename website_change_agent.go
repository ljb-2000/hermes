package main

import (
	"hash/fnv"
	"io"
	"time"
)

// FetchWebsiteChecksum downloads the resource at url,
// and returns an fnv hash of its content.
func FetchWebsiteChecksum(fetcher Fetcher, url string) (uint64, error) {
	website, err := fetcher.Fetch(url)
	if err != nil {
		return 0, err
	}
	defer website.Close()

	hash := fnv.New64()
	_, err = io.Copy(hash, website)
	if err != nil {
		return 0, err
	}

	return hash.Sum64(), nil
}

// WebsiteChangeAgent records when the content of a
// website has changed.
type WebsiteChangeAgent struct {
	fetcher  Fetcher
	events   chan bool
	name     string
	lastSum  uint64
	interval time.Duration
}

// WebsiteChangeAgentConfig is the configuration of a WebsiteChangeAgent,
// without its current state.
type WebsiteChangeAgentConfig struct {
	Fetcher  Fetcher
	Name     string
	Interval time.Duration
}

// State returns the state of the change agent
func (w WebsiteChangeAgent) State() interface{} {
	return w.lastSum
}

// Events is the stream of events generated by the agent.
func (w WebsiteChangeAgent) Events() chan bool {
	return w.events
}

// CheckForChange queries the agents fetcher for the agents name,
// and returns a bool indicating if the content has changed (true on change).
func (w *WebsiteChangeAgent) CheckForChange() bool {
	sum, err := FetchWebsiteChecksum(w.fetcher, w.name)
	if err != nil {
		panic("uh oh")
	}
	if sum != w.lastSum {
		w.lastSum = sum
		return true
	}
	return false
}

// Run runs the change agent, checking for changes at the agents interval.
func (w *WebsiteChangeAgent) Run() {
	for {
		if w.CheckForChange() {
			w.events <- true
		}
	}
}

// NewWebsiteChangeAgent creates a non-run WebsiteChangeAgent given a
// configuration. The lastSum is set to 0.
func NewWebsiteChangeAgent(config WebsiteChangeAgentConfig) WebsiteChangeAgent {
	events := make(chan bool)
	agent := WebsiteChangeAgent{
		fetcher:  config.Fetcher,
		events:   events,
		name:     config.Name,
		interval: config.Interval,
		lastSum:  0,
	}
	return agent
}
